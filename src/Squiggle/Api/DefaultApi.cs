/* 
 * Squiggle API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Squiggle.Client;
using Squiggle.Model;

namespace Squiggle.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Address</returns>
        Address AddAddress (Address data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AddAddressWithHttpInfo (Address data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileObject</returns>
        FileObject AddFile (System.IO.Stream file, string name = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileObject</returns>
        ApiResponse<FileObject> AddFileWithHttpInfo (System.IO.Stream file, string name = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new global template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>GlobalTemplate</returns>
        GlobalTemplate AddGlobalTemplate (GlobalTemplate data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new global template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplate</returns>
        ApiResponse<GlobalTemplate> AddGlobalTemplateWithHttpInfo (GlobalTemplate data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new snippet
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Snippet</returns>
        Snippet AddSnippet (Snippet data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new snippet
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Snippet</returns>
        ApiResponse<Snippet> AddSnippetWithHttpInfo (Snippet data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Template</returns>
        Template AddTemplate (Template data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> AddTemplateWithHttpInfo (Template data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new user
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>User</returns>
        User AddUser (User data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new user
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> AddUserWithHttpInfo (User data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        void DeleteAddress (long? id, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAddressWithHttpInfo (long? id, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns></returns>
        void DeleteFile (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        void DeleteGlobalTemplate (long? id, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGlobalTemplateWithHttpInfo (long? id, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        void DeleteSnippet (long? id, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSnippetWithHttpInfo (long? id, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        void DeleteTemplate (long? id, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (long? id, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        void DeleteUser (long? id, bool? force = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (long? id, bool? force = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>Address</returns>
        Address EditAddress (long? id, Address data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> EditAddressWithHttpInfo (long? id, Address data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileObject</returns>
        FileObject EditFile (long? id, System.IO.Stream file = null, string name = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileObject</returns>
        ApiResponse<FileObject> EditFileWithHttpInfo (long? id, System.IO.Stream file = null, string name = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>GlobalTemplate</returns>
        GlobalTemplate EditGlobalTemplate (long? id, GlobalTemplate data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplate</returns>
        ApiResponse<GlobalTemplate> EditGlobalTemplateWithHttpInfo (long? id, GlobalTemplate data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>Snippet</returns>
        Snippet EditSnippet (long? id, Snippet data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Snippet</returns>
        ApiResponse<Snippet> EditSnippetWithHttpInfo (long? id, Snippet data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>Template</returns>
        Template EditTemplate (long? id, Template data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> EditTemplateWithHttpInfo (long? id, Template data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>User</returns>
        User EditUser (long? id, User data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> EditUserWithHttpInfo (long? id, User data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets addresses
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;Address&gt;</returns>
        List<Address> FindAddresses (string filter = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets addresses
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;Address&gt;</returns>
        ApiResponse<List<Address>> FindAddressesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets files
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;FileObject&gt;</returns>
        List<FileObject> FindFiles (string filter = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets files
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;FileObject&gt;</returns>
        ApiResponse<List<FileObject>> FindFilesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets global templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;GlobalTemplate&gt;</returns>
        List<GlobalTemplate> FindGlobalTemplates (string filter = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets global templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;GlobalTemplate&gt;</returns>
        ApiResponse<List<GlobalTemplate>> FindGlobalTemplatesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets snippets
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;Snippet&gt;</returns>
        List<Snippet> FindSnippets (string filter = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets snippets
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;Snippet&gt;</returns>
        ApiResponse<List<Snippet>> FindSnippetsWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> FindTemplates (string filter = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> FindTemplatesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets users
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> FindUsers (string filter = null, string sort = null, int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets users
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> FindUsersWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>Address</returns>
        Address GetAddress (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> GetAddressWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for Address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebToken</returns>
        JSONWebToken GetAddressToken (LoginDetails data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for Address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebToken</returns>
        ApiResponse<JSONWebToken> GetAddressTokenWithHttpInfo (LoginDetails data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>FileObject</returns>
        FileObject GetFile (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>ApiResponse of FileObject</returns>
        ApiResponse<FileObject> GetFileWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>GlobalTemplate</returns>
        GlobalTemplate GetGlobalTemplate (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>ApiResponse of GlobalTemplate</returns>
        ApiResponse<GlobalTemplate> GetGlobalTemplateWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>Snippet</returns>
        Snippet GetSnippet (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>ApiResponse of Snippet</returns>
        ApiResponse<Snippet> GetSnippetWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>Template</returns>
        Template GetTemplate (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>User</returns>
        User GetUser (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for User
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebToken</returns>
        JSONWebToken GetUserToken (LoginDetails data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for User
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebToken</returns>
        ApiResponse<JSONWebToken> GetUserTokenWithHttpInfo (LoginDetails data);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Squiggle.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Squiggle.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Squiggle.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Squiggle.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a new address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Address</returns>
        public Address AddAddress (Address data)
        {
             ApiResponse<Address> localVarResponse = AddAddressWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Address</returns>
        public ApiResponse< Address > AddAddressWithHttpInfo (Address data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddAddress");

            var localVarPath = "/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
            
        }

        /// <summary>
        ///  Upload a new file
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileObject</returns>
        public FileObject AddFile (System.IO.Stream file, string name = null)
        {
             ApiResponse<FileObject> localVarResponse = AddFileWithHttpInfo(file, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a new file
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileObject</returns>
        public ApiResponse< FileObject > AddFileWithHttpInfo (System.IO.Stream file, string name = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->AddFile");

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileObject) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileObject)));
            
        }

        /// <summary>
        ///  Creates a new global template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>GlobalTemplate</returns>
        public GlobalTemplate AddGlobalTemplate (GlobalTemplate data)
        {
             ApiResponse<GlobalTemplate> localVarResponse = AddGlobalTemplateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new global template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplate</returns>
        public ApiResponse< GlobalTemplate > AddGlobalTemplateWithHttpInfo (GlobalTemplate data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddGlobalTemplate");

            var localVarPath = "/global-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplate)));
            
        }

        /// <summary>
        ///  Creates a new snippet
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Snippet</returns>
        public Snippet AddSnippet (Snippet data)
        {
             ApiResponse<Snippet> localVarResponse = AddSnippetWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new snippet
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Snippet</returns>
        public ApiResponse< Snippet > AddSnippetWithHttpInfo (Snippet data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddSnippet");

            var localVarPath = "/snippets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Snippet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Snippet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Snippet)));
            
        }

        /// <summary>
        ///  Creates a new template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Template</returns>
        public Template AddTemplate (Template data)
        {
             ApiResponse<Template> localVarResponse = AddTemplateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > AddTemplateWithHttpInfo (Template data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddTemplate");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        ///  Creates a new user
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>User</returns>
        public User AddUser (User data)
        {
             ApiResponse<User> localVarResponse = AddUserWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new user
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > AddUserWithHttpInfo (User data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
            
        }

        /// <summary>
        ///  Deletes an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        public void DeleteAddress (long? id, bool? force = null)
        {
             DeleteAddressWithHttpInfo(id, force);
        }

        /// <summary>
        ///  Deletes an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAddressWithHttpInfo (long? id, bool? force = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteAddress");

            var localVarPath = "/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns></returns>
        public void DeleteFile (long? id)
        {
             DeleteFileWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteFile");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        public void DeleteGlobalTemplate (long? id, bool? force = null)
        {
             DeleteGlobalTemplateWithHttpInfo(id, force);
        }

        /// <summary>
        ///  Deletes a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGlobalTemplateWithHttpInfo (long? id, bool? force = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteGlobalTemplate");

            var localVarPath = "/global-templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        public void DeleteSnippet (long? id, bool? force = null)
        {
             DeleteSnippetWithHttpInfo(id, force);
        }

        /// <summary>
        ///  Deletes a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSnippetWithHttpInfo (long? id, bool? force = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        public void DeleteTemplate (long? id, bool? force = null)
        {
             DeleteTemplateWithHttpInfo(id, force);
        }

        /// <summary>
        ///  Deletes a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo (long? id, bool? force = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteTemplate");

            var localVarPath = "/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns></returns>
        public void DeleteUser (long? id, bool? force = null)
        {
             DeleteUserWithHttpInfo(id, force);
        }

        /// <summary>
        ///  Deletes a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <param name="force">Disables soft-delete when true, completely removing the row (use with caution!) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (long? id, bool? force = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Updates an existing address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>Address</returns>
        public Address EditAddress (long? id, Address data)
        {
             ApiResponse<Address> localVarResponse = EditAddressWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Address</returns>
        public ApiResponse< Address > EditAddressWithHttpInfo (long? id, Address data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditAddress");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditAddress");

            var localVarPath = "/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
            
        }

        /// <summary>
        ///  Updates an existing file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileObject</returns>
        public FileObject EditFile (long? id, System.IO.Stream file = null, string name = null)
        {
             ApiResponse<FileObject> localVarResponse = EditFileWithHttpInfo(id, file, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileObject</returns>
        public ApiResponse< FileObject > EditFileWithHttpInfo (long? id, System.IO.Stream file = null, string name = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditFile");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileObject) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileObject)));
            
        }

        /// <summary>
        ///  Updates an existing global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>GlobalTemplate</returns>
        public GlobalTemplate EditGlobalTemplate (long? id, GlobalTemplate data)
        {
             ApiResponse<GlobalTemplate> localVarResponse = EditGlobalTemplateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplate</returns>
        public ApiResponse< GlobalTemplate > EditGlobalTemplateWithHttpInfo (long? id, GlobalTemplate data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditGlobalTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditGlobalTemplate");

            var localVarPath = "/global-templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplate)));
            
        }

        /// <summary>
        ///  Updates an existing snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>Snippet</returns>
        public Snippet EditSnippet (long? id, Snippet data)
        {
             ApiResponse<Snippet> localVarResponse = EditSnippetWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Snippet</returns>
        public ApiResponse< Snippet > EditSnippetWithHttpInfo (long? id, Snippet data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditSnippet");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Snippet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Snippet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Snippet)));
            
        }

        /// <summary>
        ///  Updates an existing template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>Template</returns>
        public Template EditTemplate (long? id, Template data)
        {
             ApiResponse<Template> localVarResponse = EditTemplateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > EditTemplateWithHttpInfo (long? id, Template data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditTemplate");

            var localVarPath = "/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        ///  Updates an existing user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>User</returns>
        public User EditUser (long? id, User data)
        {
             ApiResponse<User> localVarResponse = EditUserWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > EditUserWithHttpInfo (long? id, User data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditUser");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
            
        }

        /// <summary>
        ///  Gets addresses
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;Address&gt;</returns>
        public List<Address> FindAddresses (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<List<Address>> localVarResponse = FindAddressesWithHttpInfo(filter, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets addresses
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;Address&gt;</returns>
        public ApiResponse< List<Address> > FindAddressesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Address>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Address>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Address>)));
            
        }

        /// <summary>
        ///  Gets files
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;FileObject&gt;</returns>
        public List<FileObject> FindFiles (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<List<FileObject>> localVarResponse = FindFilesWithHttpInfo(filter, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets files
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;FileObject&gt;</returns>
        public ApiResponse< List<FileObject> > FindFilesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FileObject>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileObject>)));
            
        }

        /// <summary>
        ///  Gets global templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;GlobalTemplate&gt;</returns>
        public List<GlobalTemplate> FindGlobalTemplates (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<List<GlobalTemplate>> localVarResponse = FindGlobalTemplatesWithHttpInfo(filter, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets global templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;GlobalTemplate&gt;</returns>
        public ApiResponse< List<GlobalTemplate> > FindGlobalTemplatesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/global-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGlobalTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GlobalTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GlobalTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GlobalTemplate>)));
            
        }

        /// <summary>
        ///  Gets snippets
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;Snippet&gt;</returns>
        public List<Snippet> FindSnippets (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<List<Snippet>> localVarResponse = FindSnippetsWithHttpInfo(filter, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets snippets
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;Snippet&gt;</returns>
        public ApiResponse< List<Snippet> > FindSnippetsWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/snippets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindSnippets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Snippet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Snippet>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Snippet>)));
            
        }

        /// <summary>
        ///  Gets templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> FindTemplates (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<List<Template>> localVarResponse = FindTemplatesWithHttpInfo(filter, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > FindTemplatesWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        ///  Gets users
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> FindUsers (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {
             ApiResponse<List<User>> localVarResponse = FindUsersWithHttpInfo(filter, sort, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets users
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">A list of fields and values to filter by, in query string format eg. &#39;type&#x3D;order&amp;status&#x3D;1&#39; (optional)</param>
        /// <param name="sort">A comma-separated list of fields to sort by (optional)</param>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > FindUsersWithHttpInfo (string filter = null, string sort = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
            
        }

        /// <summary>
        ///  Gets an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>Address</returns>
        public Address GetAddress (long? id)
        {
             ApiResponse<Address> localVarResponse = GetAddressWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>ApiResponse of Address</returns>
        public ApiResponse< Address > GetAddressWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAddress");

            var localVarPath = "/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
            
        }

        /// <summary>
        ///  Request JWT for Address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebToken</returns>
        public JSONWebToken GetAddressToken (LoginDetails data)
        {
             ApiResponse<JSONWebToken> localVarResponse = GetAddressTokenWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Request JWT for Address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebToken</returns>
        public ApiResponse< JSONWebToken > GetAddressTokenWithHttpInfo (LoginDetails data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->GetAddressToken");

            var localVarPath = "/token/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JSONWebToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JSONWebToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JSONWebToken)));
            
        }

        /// <summary>
        ///  Gets a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>FileObject</returns>
        public FileObject GetFile (long? id)
        {
             ApiResponse<FileObject> localVarResponse = GetFileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>ApiResponse of FileObject</returns>
        public ApiResponse< FileObject > GetFileWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetFile");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileObject) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileObject)));
            
        }

        /// <summary>
        ///  Gets a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>GlobalTemplate</returns>
        public GlobalTemplate GetGlobalTemplate (long? id)
        {
             ApiResponse<GlobalTemplate> localVarResponse = GetGlobalTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>ApiResponse of GlobalTemplate</returns>
        public ApiResponse< GlobalTemplate > GetGlobalTemplateWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetGlobalTemplate");

            var localVarPath = "/global-templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplate)));
            
        }

        /// <summary>
        ///  Gets a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>Snippet</returns>
        public Snippet GetSnippet (long? id)
        {
             ApiResponse<Snippet> localVarResponse = GetSnippetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>ApiResponse of Snippet</returns>
        public ApiResponse< Snippet > GetSnippetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Snippet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Snippet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Snippet)));
            
        }

        /// <summary>
        ///  Gets a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>Template</returns>
        public Template GetTemplate (long? id)
        {
             ApiResponse<Template> localVarResponse = GetTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > GetTemplateWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetTemplate");

            var localVarPath = "/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        ///  Gets a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>User</returns>
        public User GetUser (long? id)
        {
             ApiResponse<User> localVarResponse = GetUserWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
            
        }

        /// <summary>
        ///  Request JWT for User
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebToken</returns>
        public JSONWebToken GetUserToken (LoginDetails data)
        {
             ApiResponse<JSONWebToken> localVarResponse = GetUserTokenWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Request JWT for User
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebToken</returns>
        public ApiResponse< JSONWebToken > GetUserTokenWithHttpInfo (LoginDetails data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->GetUserToken");

            var localVarPath = "/token/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JSONWebToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JSONWebToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JSONWebToken)));
            
        }

    }
}
