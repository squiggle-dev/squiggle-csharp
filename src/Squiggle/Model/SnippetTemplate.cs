/* 
 * Squiggle API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Squiggle.Model
{
    /// <summary>
    /// SnippetTemplate
    /// </summary>
    [DataContract]
    public partial class SnippetTemplate :  IEquatable<SnippetTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetTemplate" /> class.
        /// </summary>
        /// <param name="Enabled">Enabled.</param>
        /// <param name="Html">Html.</param>
        /// <param name="Plaintext">Plaintext.</param>
        public SnippetTemplate(bool? Enabled = null, string Html = null, string Plaintext = null)
        {
            this.Enabled = Enabled;
            this.Html = Html;
            this.Plaintext = Plaintext;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="Enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name="Html", EmitDefaultValue=false)]
        public string Html { get; set; }
        /// <summary>
        /// Gets or Sets Plaintext
        /// </summary>
        [DataMember(Name="Plaintext", EmitDefaultValue=false)]
        public string Plaintext { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnippetTemplate {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Plaintext: ").Append(Plaintext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SnippetTemplate);
        }

        /// <summary>
        /// Returns true if SnippetTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of SnippetTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnippetTemplate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.Html == other.Html ||
                    this.Html != null &&
                    this.Html.Equals(other.Html)
                ) && 
                (
                    this.Plaintext == other.Plaintext ||
                    this.Plaintext != null &&
                    this.Plaintext.Equals(other.Plaintext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.Html != null)
                    hash = hash * 59 + this.Html.GetHashCode();
                if (this.Plaintext != null)
                    hash = hash * 59 + this.Plaintext.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
