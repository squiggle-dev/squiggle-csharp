/* 
 * Squiggle API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Squiggle.Client;
using Squiggle.Api;
using Squiggle.Model;

namespace Squiggle.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test AddAddress
        /// </summary>
        [Test]
        public void AddAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Address data = null;
            //var response = instance.AddAddress(data);
            //Assert.IsInstanceOf<Address> (response, "response is Address");
        }
        
        /// <summary>
        /// Test AddFile
        /// </summary>
        [Test]
        public void AddFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //string name = null;
            //var response = instance.AddFile(file, name);
            //Assert.IsInstanceOf<FileObject> (response, "response is FileObject");
        }
        
        /// <summary>
        /// Test AddGlobalTemplate
        /// </summary>
        [Test]
        public void AddGlobalTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GlobalTemplate data = null;
            //var response = instance.AddGlobalTemplate(data);
            //Assert.IsInstanceOf<GlobalTemplate> (response, "response is GlobalTemplate");
        }
        
        /// <summary>
        /// Test AddSnippet
        /// </summary>
        [Test]
        public void AddSnippetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Snippet data = null;
            //var response = instance.AddSnippet(data);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test AddTemplate
        /// </summary>
        [Test]
        public void AddTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Template data = null;
            //var response = instance.AddTemplate(data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test AddUser
        /// </summary>
        [Test]
        public void AddUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User data = null;
            //var response = instance.AddUser(data);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test DeleteAddress
        /// </summary>
        [Test]
        public void DeleteAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteAddress(id);
            
        }
        
        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteFile(id);
            
        }
        
        /// <summary>
        /// Test DeleteGlobalTemplate
        /// </summary>
        [Test]
        public void DeleteGlobalTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteGlobalTemplate(id);
            
        }
        
        /// <summary>
        /// Test DeleteSnippet
        /// </summary>
        [Test]
        public void DeleteSnippetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteSnippet(id);
            
        }
        
        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Test]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteTemplate(id);
            
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteUser(id);
            
        }
        
        /// <summary>
        /// Test EditAddress
        /// </summary>
        [Test]
        public void EditAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //Address data = null;
            //var response = instance.EditAddress(id, data);
            //Assert.IsInstanceOf<Address> (response, "response is Address");
        }
        
        /// <summary>
        /// Test EditFile
        /// </summary>
        [Test]
        public void EditFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //System.IO.Stream file = null;
            //string name = null;
            //var response = instance.EditFile(id, file, name);
            //Assert.IsInstanceOf<FileObject> (response, "response is FileObject");
        }
        
        /// <summary>
        /// Test EditGlobalTemplate
        /// </summary>
        [Test]
        public void EditGlobalTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //GlobalTemplate data = null;
            //var response = instance.EditGlobalTemplate(id, data);
            //Assert.IsInstanceOf<GlobalTemplate> (response, "response is GlobalTemplate");
        }
        
        /// <summary>
        /// Test EditSnippet
        /// </summary>
        [Test]
        public void EditSnippetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //Snippet data = null;
            //var response = instance.EditSnippet(id, data);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test EditTemplate
        /// </summary>
        [Test]
        public void EditTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //Template data = null;
            //var response = instance.EditTemplate(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test EditUser
        /// </summary>
        [Test]
        public void EditUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //User data = null;
            //var response = instance.EditUser(id, data);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test FindAddresses
        /// </summary>
        [Test]
        public void FindAddressesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindAddresses(offset, limit);
            //Assert.IsInstanceOf<List<Address>> (response, "response is List<Address>");
        }
        
        /// <summary>
        /// Test FindFiles
        /// </summary>
        [Test]
        public void FindFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindFiles(offset, limit);
            //Assert.IsInstanceOf<List<FileObject>> (response, "response is List<FileObject>");
        }
        
        /// <summary>
        /// Test FindGlobalTemplates
        /// </summary>
        [Test]
        public void FindGlobalTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindGlobalTemplates(offset, limit);
            //Assert.IsInstanceOf<List<GlobalTemplate>> (response, "response is List<GlobalTemplate>");
        }
        
        /// <summary>
        /// Test FindSnippets
        /// </summary>
        [Test]
        public void FindSnippetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindSnippets(offset, limit);
            //Assert.IsInstanceOf<List<Snippet>> (response, "response is List<Snippet>");
        }
        
        /// <summary>
        /// Test FindTemplates
        /// </summary>
        [Test]
        public void FindTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindTemplates(offset, limit);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test FindUsers
        /// </summary>
        [Test]
        public void FindUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.FindUsers(offset, limit);
            //Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test GetAddress
        /// </summary>
        [Test]
        public void GetAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetAddress(id);
            //Assert.IsInstanceOf<Address> (response, "response is Address");
        }
        
        /// <summary>
        /// Test GetAddressToken
        /// </summary>
        [Test]
        public void GetAddressTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginDetails data = null;
            //var response = instance.GetAddressToken(data);
            //Assert.IsInstanceOf<JSONWebTokenResponse> (response, "response is JSONWebTokenResponse");
        }
        
        /// <summary>
        /// Test GetFile
        /// </summary>
        [Test]
        public void GetFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetFile(id);
            //Assert.IsInstanceOf<FileObject> (response, "response is FileObject");
        }
        
        /// <summary>
        /// Test GetGlobalTemplate
        /// </summary>
        [Test]
        public void GetGlobalTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetGlobalTemplate(id);
            //Assert.IsInstanceOf<GlobalTemplate> (response, "response is GlobalTemplate");
        }
        
        /// <summary>
        /// Test GetSnippet
        /// </summary>
        [Test]
        public void GetSnippetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetSnippet(id);
            //Assert.IsInstanceOf<Snippet> (response, "response is Snippet");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetTemplate(id);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetUser(id);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetUserToken
        /// </summary>
        [Test]
        public void GetUserTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginDetails data = null;
            //var response = instance.GetUserToken(data);
            //Assert.IsInstanceOf<JSONWebTokenResponse> (response, "response is JSONWebTokenResponse");
        }
        
    }

}
